        -:    0:Source:code.cc
        -:    0:Graph:code.gcno
        -:    0:Data:code.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <iostream>
        -:    2:#include <fstream>
        -:    3:#include <time.h>
        -:    4:#include <cassert>
        -:    5:#include <sstream>
        -:    6:using namespace std;
        -:    7:
        -:    8:class Date {
        -:    9:  public:
        -:   10:    Date();
        -:   11:    // Default copy ctor is fine
        -:   12:    // Default assignment operator is fine
        -:   13:    Date(int year, int month, int day);
        -:   14:
        -:   15:    int getday() const;
        -:   16:    int getmonth() const;
        -:   17:    int getyear() const;
        -:   18:
        -:   19:    void setday(int);
        -:   20:    void setmonth(int);
        -:   21:    void setyear(int);
        -:   22:
        -:   23:    Date &operator+=(int);
        -:   24:    int operator-(const Date &) const;
        -:   25:
        -:   26:    Date operator+(int) const;
        -:   27:    const Date &operator++();	// prefix
        -:   28:    Date operator++(int);		// postfix
        -:   29:
        -:   30:    Date operator-(int) const;
        -:   31:    Date &operator-=(int);
        -:   32:    const Date &operator--();	// prefix
        -:   33:    Date operator--(int);		// postfix
        -:   34:
        -:   35:    bool operator<(const Date &) const;
        -:   36:    bool operator<=(const Date &) const;
        -:   37:    bool operator>(const Date &) const;
        -:   38:    bool operator>=(const Date &) const;
        -:   39:    bool operator==(const Date &) const;
        -:   40:    bool operator!=(const Date &) const;
        -:   41:
        -:   42:  protected:
        -:   43:    static int ymd_to_daynum(int year, int month, int day);
        -:   44:    int daynum;				// 1 = January 1, year 1
        -:   45:};
        -:   46:
        -:   47:Date operator+(int, const Date &);
        -:   48:ostream &operator<<(ostream &out, const Date &);	// YYYY-MM-DD
        -:   49:istream &operator>>(istream &in, Date &);		// YYYY-MM-DD
        -:   50:
  7212947:   51:static bool leap(int year) {
  7212947:   52:    assert(1 <= year && year <= 9999);
  7212947:   53:    if (year % 400 == 0)			// Divisible by 400?
    18425:   54:	return true;				// It’s a leap year.
  7194522:   55:    if (year % 100 == 0)			// Divisible by 100?
    53385:   56:	return false;				// Not a leap year.
  7141137:   57:    if (year % 4 == 0)				// Divisible by 4?
  1776178:   58:	return true;				// It’s a leap year.
  5364959:   59:    return false;				// Boring old ordinary year.
        -:   60:}
        -:   61:
    62280:   62:static int days_per_year(int year) {
    62280:   63:    assert(1 <= year && year <= 9999);
    62280:   64:    return leap(year) ? 366 : 365;
        -:   65:}
        -:   66:
 92439602:   67:static int days_per_month(int year, int month) {
 92439602:   68:    assert(1 <= year && year <= 9999);
 92439602:   69:    assert(1 <= month && month <= 12);
 92439602:   70:    const int days[] = {00,31,28,31,30,31,30,31,31,30,31,30,31};
 92439602:   71:    if (month==2 && leap(year))
  1779498:   72:	return 29;
 90660104:   73:    return days[month];
        -:   74:}
        -:   75:
       55:   76:int Date::ymd_to_daynum(int year, int month, int day) {
       55:   77:    assert(1 <= year && year <= 9999);
       55:   78:    assert(1 <= month && month <= 12);
       55:   79:    assert(1 <= day && day <= 31);
        -:   80:
        -:   81:    // Start at Jan 1, 0001, and increment until we get to what we want
       55:   82:    int daynum=1;
        -:   83:
    62335:   84:    for (int y=1; y < year; y++)
    62280:   85:	daynum += days_per_year(y);
        -:   86:
      337:   87:    for (int m=1; m < month; m++)
      282:   88:	daynum += days_per_month(year, m);
        -:   89:
        -:   90:    // We're now poised at the first day of that month
       55:   91:    daynum += day-1;
        -:   92:
       55:   93:    assert(1 <= daynum && daynum <= 10000 * 366);
       55:   94:    return daynum;
        -:   95:}
        -:   96:
      198:   97:static void daynum_to_ymd(int daynum, int &year, int &month, int &day) {
      198:   98:    assert(1 <= daynum && daynum <= 10000 * 366);
        -:   99:
      198:  100:    int y=1, m=1, d=1;
        -:  101:
        -:  102:if(0){
        -:  103:    // Jump forward by years, at first.  This reduces the iterations,
        -:  104:    // for modern dates, from ~733k to ~2181.
        -:  105:    while (daynum >= 366)
        -:  106:	daynum -= days_per_year(y++);
        -:  107:    }
        -:  108:
184878838:  109:    for (; daynum>1; daynum--) {
        -:  110:	// Increment y-m-d
 92439320:  111:	d++;
 92439320:  112:	if (d > days_per_month(y, m)) {
  3037004:  113:	    m++;
  3037004:  114:	    d=1;
  3037004:  115:	    if (m > 12) {
   253008:  116:		y++;
   253008:  117:		m=1;
        -:  118:	    }
        -:  119:	}
        -:  120:    }
        -:  121:
      198:  122:    year = y;
      198:  123:    month = m;
      198:  124:    day = d;
        -:  125:
      198:  126:    assert(1 <= year && year <= 9999);
      198:  127:    assert(1 <= month && month <= 12);
      198:  128:    assert(1 <= day && day <= 31);
      198:  129:}
        -:  130:
       49:  131:Date::Date(int year, int month, int day)
       49:  132:: daynum(ymd_to_daynum(year, month, day)) {
       49:  133:    assert(1 <= year && year <= 9999);
       49:  134:    assert(1 <= month && month <= 12);
       49:  135:    assert(1 <= day && day <= 31);
       49:  136:    assert(1 <= daynum && daynum <= 10000 * 366);
       49:  137:}
        -:  138:
        3:  139:Date::Date() {
        3:  140:    const time_t now = time(nullptr);	    // Seconds since 1970 started
        3:  141:    struct tm *tm = localtime(&now);	    // year/month/day/hour/min/sec
        3:  142:    daynum = ymd_to_daynum(tm->tm_year+1900, tm->tm_mon+1, tm->tm_mday);
        -:  143:    // Yes, 1900.  That’s not a Y2K bug--that’s how localtime is defined.
        3:  144:}
        -:  145:
       65:  146:int Date::getday() const {
        -:  147:    int year, month, day;
       65:  148:    daynum_to_ymd(daynum, year, month, day);
       65:  149:    return day;
        -:  150:}
        -:  151:
       65:  152:int Date::getmonth() const {
        -:  153:    int year, month, day;
       65:  154:    daynum_to_ymd(daynum, year, month, day);
       65:  155:    return month;
        -:  156:}
        -:  157:
       65:  158:int Date::getyear() const {
        -:  159:    int year, month, day;
       65:  160:    daynum_to_ymd(daynum, year, month, day);
       65:  161:    return year;
        -:  162:}
        -:  163:
        1:  164:void Date::setday(int new_day) {
        -:  165:    int year, month, day;
        1:  166:    daynum_to_ymd(daynum, year, month, day);
        1:  167:    daynum = ymd_to_daynum(year, month, new_day);
        1:  168:}
        -:  169:
        1:  170:void Date::setmonth(int new_month) {
        -:  171:    int year, month, day;
        1:  172:    daynum_to_ymd(daynum, year, month, day);
        1:  173:    daynum = ymd_to_daynum(year, new_month, day);
        1:  174:}
        -:  175:
        1:  176:void Date::setyear(int new_year) {
        -:  177:    int year, month, day;
        1:  178:    daynum_to_ymd(daynum, year, month, day);
        1:  179:    daynum = ymd_to_daynum(new_year, month, day);
        1:  180:}
        -:  181:
        -:  182:// This one stands alone
        -:  183:
        2:  184:int Date::operator-(const Date &rhs) const {
        2:  185:    return daynum - rhs.daynum;
        -:  186:}
        -:  187:
        -:  188:// This does the real work of all numeric operations.
        -:  189:// All other operators (+, -, ++, -=, etc) should invoke operator+=.
        -:  190:
       10:  191:Date &Date::operator+=(int value) {
       10:  192:    daynum += value;
       10:  193:    return *this;
        -:  194:}
        -:  195:
        3:  196:Date Date::operator+(int value) const {
        3:  197:    Date result = *this;
        3:  198:    return result += value;
        -:  199:}
        -:  200:
        1:  201:const Date &Date::operator++() {			// prefix
        1:  202:    *this += 1;
        1:  203:    return *this;
        -:  204:}
        -:  205:
        1:  206:Date Date::operator++(int /* dummy */) {		// postfix
        1:  207:    const auto before = *this;
        1:  208:    *this += 1;
        1:  209:    return before;
        -:  210:}
        -:  211:
        1:  212:Date Date::operator-(int value) const {
        1:  213:    return *this + -value;
        -:  214:}
        -:  215:
        4:  216:Date &Date::operator-=(int value) {
        4:  217:    return *this += -value;
        -:  218:}
        -:  219:
        1:  220:const Date &Date::operator--() {			// prefix
        1:  221:    *this -= 1;
        1:  222:    return *this;
        -:  223:}
        -:  224:
        1:  225:Date Date::operator--(int /* dummy */) {		// postfix
        1:  226:    Date before = *this;
        1:  227:    *this -= 1;
        1:  228:    return before;
        -:  229:}
        -:  230:
        -:  231:
        2:  232:bool Date::operator<(const Date &rhs) const {
        2:  233:    return daynum < rhs.daynum;
        -:  234:}
        -:  235:
        3:  236:bool Date::operator<=(const Date &rhs) const {
        3:  237:    return daynum <= rhs.daynum;
        -:  238:}
        -:  239:
        2:  240:bool Date::operator>(const Date &rhs) const {
        2:  241:    return daynum > rhs.daynum;
        -:  242:}
        -:  243:
        3:  244:bool Date::operator>=(const Date &rhs) const {
        3:  245:    return daynum >= rhs.daynum;
        -:  246:}
        -:  247:
        2:  248:bool Date::operator==(const Date &rhs) const {
        2:  249:    return daynum == rhs.daynum;
        -:  250:}
        -:  251:
        2:  252:bool Date::operator!=(const Date &rhs) const {
        2:  253:    return daynum != rhs.daynum;
        -:  254:}
        -:  255:
        1:  256:Date operator+(int value, const Date &rhs) {
        1:  257:    return rhs + value;
        -:  258:}
        -:  259:
       65:  260:ostream &operator<<(ostream &out, const Date &d) {
       65:  261:    return out << d.getyear() << '-' << d.getmonth() << '-' << d.getday();
        -:  262:}
        -:  263:
        -:  264:#include <iomanip>
        -:  265:
       51:  266:istream &operator>>(istream &in, Date &d) {
        -:  267:    int year, month, day;
        -:  268:    char c1, c2;
      151:  269:    if (in >> year  >> c1 && c1=='-'
       48:  270:     && in >> month >> c2 && c2=='-'
       99:  271:     && in >> day)
       48:  272:	d = Date(year, month, day);
        -:  273:    else
        3:  274:	in.setstate(ios::failbit);	// Input failed, so spoil the stream
       51:  275:    return in;
        -:  276:}
        -:  277:
        -:  278:
        1:  279:int main() {
        -:  280:    // Read & display some dates
        2:  281:    ifstream data("data");
        1:  282:    Date d;
        -:  283:    // Read each line, try to convert it to a date, complain if it fails.
       52:  284:    for (string s; getline(data, s); ) {
      102:  285:	istringstream iss(s);	// Initialize stream with string
       51:  286:	if (iss >> d)		// Try to convert to a date
       48:  287:	    cout << d << '\n';
        -:  288:	else
        3:  289:	    cerr << "Bad date \"" << s << "\"\n";
        -:  290:    }
        -:  291:
        1:  292:    const Date a(2009,3,4);
        1:  293:    Date test;
        1:  294:    test.setday(4);
        1:  295:    test.setmonth(5); 
        1:  296:    test.setyear(2001);
        1:  297:    cout << "addition of 7 and test" << 7+test << '\n';
        1:  298:    cout << a << '\n';		// Wed Mar 4 2009
        -:  299:
        1:  300:    const Date b(a);
        1:  301:    cout << b << '\n';		// Wed Mar 4 2009
        -:  302:
        1:  303:    Date c; c=a;
        1:  304:    cout << c << '\n';		// Wed Mar 4 2009
        -:  305:
        1:  306:    c = c+1;
        1:  307:    cout << c << '\n';		// Thu Mar 5 2009
        1:  308:    c += 9;
        1:  309:    cout << c << '\n';		// Sat Mar 14 2009
        1:  310:    d = ++c;
        1:  311:    cout << c << '\n';		// Sun Mar 15 2009
        1:  312:    cout << d << '\n';		// Sun Mar 15 2009
        -:  313:
        1:  314:    d = c++;
        1:  315:    cout << c << '\n';		// Mon Mar 16 2009
        1:  316:    cout << d << '\n';		// Sun Mar 15 2009
        -:  317:
        1:  318:    Date e = d-1;
        1:  319:    cout << e << '\n';		// Sat Mar 14 2009
        1:  320:    d = e--;
        1:  321:    cout << d << '\n';		// Sat Mar 14 2009
        1:  322:    cout << e << '\n';		// Fri Mar 13 2009
        1:  323:    d = --e;
        1:  324:    cout << d << '\n';		// Thu Mar 12 2009
        1:  325:    cout << e << '\n';		// Thu Mar 12 2009
        1:  326:    e -= 5;
        1:  327:    cout << e << '\n';		// Sat Mar 7 2009
        1:  328:    e -= -2;
        1:  329:    cout << e << '\n';		// Mon Mar 9 2009
        1:  330:    cout << d-e << '\n';	// 3
        1:  331:    cout << e-d << '\n';	// -3
        -:  332:
        -:  333:    // a==b, a<c
        1:  334:    cout << ((a==b) ? "== good\n" : "== bad\n");
        1:  335:    cout << ((a==c) ? "== bad\n"  : "== good\n");
        1:  336:    cout << ((a!=c) ? "!= good\n" : "!= bad\n");
        1:  337:    cout << ((a!=b) ? "!= bad\n"  : "!= good\n");
        1:  338:    cout << ((a<c)  ? "<  good\n" : "<  bad\n");
        1:  339:    cout << ((a<b)  ? "<  bad\n"  : "<  good\n");
        1:  340:    cout << ((c>a)  ? ">  good\n" : ">  bad\n");
        1:  341:    cout << ((b>a)  ? ">  bad\n"  : ">  good\n");
        1:  342:    cout << ((a<=b) ? "<= good\n" : "<= bad\n");
        1:  343:    cout << ((a<=c) ? "<= good\n" : "<= bad\n");
        1:  344:    cout << ((c<=a) ? "<= bad\n"  : "<= good\n");
        1:  345:    cout << ((a>=b) ? ">= good\n" : ">= bad\n");
        1:  346:    cout << ((c>=a) ? ">= good\n" : ">= bad\n");
        1:  347:    cout << ((a>=c) ? ">= bad\n"  : ">= good\n");
        -:  348:
        1:  349:    return 0;
        3:  350:}

